import { supabase } from "@/lib/supabase"
import { NextResponse } from "next/server"
import { getServerSession } from "next-auth"

export async function POST(request: Request) {
  try {
    const session = await getServerSession()
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const body = await request.json()
    const { date } = body

    // Get user generating the report
    const { data: user } = await supabase.from("users").select("id, role").eq("email", session.user.email).single()

    if (!["safety_officer", "school_president"].includes(user?.role || "")) {
      return NextResponse.json({ error: "Unauthorized to generate traffic reports" }, { status: 403 })
    }

    // Get access logs for the specified date
    const startDate = new Date(date)
    startDate.setHours(0, 0, 0, 0)
    const endDate = new Date(date)
    endDate.setHours(23, 59, 59, 999)

    const { data: logs } = await supabase
      .from("access_logs")
      .select(`
        *,
        rfid_cards (
          type
        )
      `)
      .gte("timestamp", startDate.toISOString())
      .lte("timestamp", endDate.toISOString())

    if (!logs) {
      throw new Error("Failed to fetch access logs")
    }

    // Calculate statistics
    const stats = {
      student_count: new Set(
        logs
          .filter((log) => log.rfid_cards.type === "student" && log.direction === "in")
          .map((log) => log.rfid_card_id),
      ).size,
      personnel_count: new Set(
        logs
          .filter((log) => log.rfid_cards.type === "personnel" && log.direction === "in")
          .map((log) => log.rfid_card_id),
      ).size,
      visitor_count: new Set(
        logs
          .filter((log) => log.rfid_cards.type === "visitor" && log.direction === "in")
          .map((log) => log.rfid_card_id),
      ).size,
      parent_count: new Set(
        logs.filter((log) => log.rfid_cards.type === "parent" && log.direction === "in").map((log) => log.rfid_card_id),
      ).size,
      total_entries: logs.filter((log) => log.direction === "in").length,
      total_exits: logs.filter((log) => log.direction === "out").length,
    }

    // Generate report
    const { data: report, error } = await supabase
      .from("traffic_reports")
      .insert({
        report_date: date,
        ...stats,
        generated_by: user?.id,
      })
      .select()
      .single()

    if (error) throw error

    // Notify school president if generated by safety officer
    if (user?.role === "safety_officer") {
      const { data: president } = await supabase.from("users").select("id").eq("role", "school_president").single()

      if (president) {
        await supabase.from("notifications").insert({
          user_id: president.id,
          title: "Daily Traffic Report Available",
          message: `The traffic report for ${new Date(date).toLocaleDateString()} is now available for review.`,
          type: "traffic_report",
        })
      }
    }

    return NextResponse.json(report)
  } catch (error) {
    console.error("Traffic report generation error:", error)
    return NextResponse.json({ error: "Failed to generate traffic report" }, { status: 500 })
  }
}

